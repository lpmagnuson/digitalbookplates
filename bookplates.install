<?php
/**
* @file
* Bookplates installation
*/

/**
* Implements hook_install().
*/

function bookplates_install() {
  $t = get_t();

	variable_set('bookplate_library_name', $t('Library'));
	variable_set('bookplate_library_catalog_link', $t('http://'));

	drupal_set_message($t('Bookplates variables created'));

  //  Content type definition.
  $content_type = array(
    'type' => 'bookplate',
    'name' => $t('Digital Bookplate'),
    'description' => $t('A Digital Bookplate Page'),
    'title_label' => $t('Digital Bookplate'),
    'base' => 'node_content',
    'custom' => TRUE,
    );

  // Set remaning definitions with defaults.
  $node_type = node_type_set_defaults($content_type);

  // Save the content type.
  node_type_save($node_type);

  // Add a field for the body.
  node_add_body_field($node_type, $t('Description'));

// Create fields.
$fields = array();

  $fields['bookplate_title'] = array(
    'field_name' => 'bookplate_title',
    'type' => 'text',
    'settings' => array(
      'max_length' => 100,
      ),
    );

  $fields['bookplate_full_name'] = array(
    'field_name' => 'bookplate_full_name',
    'type' => 'text',
    'settings' => array(
      'max_length' => 100,
      ),
    );

   $fields['bookplate_short_name'] = array(
    'field_name' => 'bookplate_short_name',
    'type' => 'text',
    'settings' => array(
      'max_length' => 24,
      ),
    );

   $fields['bookplate_tribute'] = array(
    'field_name' => 'bookplate_tribute',
    'type' => 'text',
    'settings' => array(
      'max_length' => 400,
      ),
    );

   $fields['bookplate_reference_url'] = array(
    'field_name' => 'bookplate_reference_url',
    'type' => 'text',
    'settings' => array(
      'max_length' => 100,
      ),
    );

   foreach ($fields as $field) {
      field_create_field($field);
   }

   // Create Field instances.
   $instances = array();

   $instances['bookplate_title'] = array(
     'field_name' => 'bookplate_title',
     'label' => $t('Bookplate Title'),
     'description' => $t('Serves as wording for the $z in the 856 URL and also as the honoree in staff mode.  It should match the name given on the book plate itself.'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    $instances['bookplate_full_name'] = array(
     'field_name' => 'bookplate_full_name',
     'label' => $t('Full Name of Donor or Honoree'),
     'description' => $t('e.g., John Doe'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    $instances['bookplate_short_name'] = array(
     'field_name' => 'bookplate_short_name',
     'label' => $t('Short Name of Donor'),
     'description' => $t('Determines the placement of the plate on the public page as well as the basis for the search that links the public plate to the books purchased for it.  Appears as Innovative field name f.  Must begin with last name'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    $instances['bookplate_tribute'] = array(
     'field_name' => 'bookplate_tribute',
     'label' => $t('Tribute to honoree'),
     'description' => $t('Display of tribute to honoree.'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => FALSE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    $instances['bookplate_reference_url'] = array(
     'field_name' => 'bookplate_reference_url',
     'label' => $t('For more information about this donation'),
     'description' => $t('Link to more information about the honoree.'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    foreach ($instances as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'bookplate';
      field_create_instance($instance);
    }

}

/**
 * Implements hook_uninstall() 
 */

 function bookplates_uninstall() {
  // Delete variables
   variable_del('bookplate_library_name');
   variable_del('bookplate_library_catalog_link');
  
  //Inform the user of the removal
  $t = get_t();
  drupal_set_message($t('Bookplates variables removed.'));
  
  // Get all node IDs with bookplate content type.
  $sql_query = 'SELECT nid ';
  $sql_query .= 'FROM {node} ';
  $sql_query .= 'WHERE {node}.type = :type ';
  $result = db_query($sql_query, array(':type' => 'bookplate'));

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all bookplate content
  node_delete_multiple($nids);
  drupal_set_message($t('Bookplates content removed.'));

  // Remove all fields and field instances
  foreach (field_info_instances('node', 'bookplate') as $field_name => $instance) {
    field_delete_instance($instance);
  }

  drupal_set_message($t('Bookplates field and field instances removed.'));

  //Delete the content type.
  node_type_delete('bookplate');

  drupal_set_message($t('Bookplate content type removed.'));

  // Clean up deleted fields.
  field_purge_batch(1000);
 }