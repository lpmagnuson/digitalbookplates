<?php
/**
 * @file
 * Bookplates installation
 */

/**
 *Implements hook_install().
 */

function bookplates_install() {
  $t = get_t();

	variable_set('bookplate_library_name', $t('Library'));
	variable_set('bookplate_library_catalog_link', $t('http://'));
    variable_set('comment_bookplate', '1');
    variable_set('node_submitted_bookplate', 0);
	drupal_set_message($t('Bookplates variables created'));

  //  Content type definition.
  $content_type = array(
    'type' => 'bookplate',
    'name' => $t('Bookplate'),
    'description' => $t('A Bookplate Page'),
    'title_label' => $t('Bookplate Title'),
    'base' => 'node_content',
    'custom' => TRUE,
    'status' => 1,
    'promote' => 0,
    'comment' => 0,
    );

  // Set remaining definitions with defaults.
  $node_type = node_type_set_defaults($content_type);

  // Save the content type.
  node_type_save($node_type);


// Create fields.
$fields = array();
   
  $fields['bookplate_image'] = array(
    'field_name' => 'bookplate_image',
    'type' => 'image',
    'title' => 'Choose a file',
    'size' => 22,
    'settings' => array(
      'uri_scheme' => variable_get('file_default_scheme', 'public'),
      'upload_validators' => array(
      'file_validate_extensions' => array('gif png jpg jpeg')),
      ),
    );


  $fields['bookplate_type'] = array(
        'field_name' => 'bookplate_type',
        'type' => 'list_integer',
        'cardinality' => '1',
        'foreign keys' => array(),
        'indexes' => array(
          'value' => array(
            0 =>'value',
            ),
          ),
        'module' => 'list',
        );

  $fields['bookplate_full_name'] = array(
    'field_name' => 'bookplate_full_name',
    'type' => 'text',
    'settings' => array(
      'max_length' => 100,
      ),
    );

   $fields['bookplate_short_name'] = array(
    'field_name' => 'bookplate_short_name',
    'type' => 'text',
    'format' =>'hidden',
    'settings' => array(
      'max_length' => 24,
      ),
    );

   $fields['bookplate_tribute'] = array(
    'field_name' => 'bookplate_tribute',
    'type' => 'text_long',
    'settings' => array(
      'rows' => 5,
      ),
    );

   $fields['bookplate_reference_url'] = array(
    'field_name' => 'bookplate_reference_url',
    'type' => 'link_field',
    'settings' => array(
      'max_length' => 100,
      ),
    );

   foreach ($fields as $field) {
      field_create_field($field);
   }

   // Create Field instances.
   $instances = array();

    $instances['bookplate_image'] = array(
     'field_name' => 'bookplate_image',
     'label' => $t('Bookplate Image File'),
     'description' => $t('Bookplate image.'),
     'widget' => array(
       'type' => 'image',
      ),
     'required' => FALSE,
     'settings' => array(
       'alt_field' => 0,
       'title_field' => 0,
       'default_value' => variable_get('default_image', ''),
      ),
     'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
     );

     $instances['bookplate_type'] = array(
      'field_name' => 'bookplate_type',
      'label' => $t('Select the bookplate type'),
      'type' => 'list_default',
      'description' => $t('Corresponds to the fund code type.'),
      'default_value' => 0,
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(),
          'type' => 'list_default',
          'weight' => -1,
          ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => -1,
        ),
      ),
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
        ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons',
        'weight' => '-1',
        ),
      );

    $instances['bookplate_full_name'] = array(
     'field_name' => 'bookplate_full_name',
     'label' => $t('Full Name of Donor or Honoree'),
     'description' => $t('e.g., John Doe'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    $instances['bookplate_short_name'] = array(
     'field_name' => 'bookplate_short_name',
     'label' => $t('Short Name of Donor'),
     'description' => $t('Determines the placement of the plate on the public page as well as the basis for the search that links the public plate to the books purchased for it.  Appears as Innovative field name f.  Must begin with last name'),
     'widget' => array(
       'type' => 'text_textfield',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'hidden',
          'format' => 'hidden',
        ),
      ),
     );

    $instances['bookplate_tribute'] = array(
     'field_name' => 'bookplate_tribute',
     'label' => $t('Tribute to honoree'),
     'description' => $t('Display of tribute to honoree.'),
     'widget' => array(
       'type' => 'text_textarea',
      ),
     'required' => FALSE,
     'settings' => array(
       'text_processing' => 1,
      ),
     'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
     );

    $instances['bookplate_reference_url'] = array(
     'field_name' => 'bookplate_reference_url',
     'label' => $t('View More Items Purchased with this Fund'),
     'description' => $t('View More Items Purchased with this Fund.'),
     'widget' => array(
       'type' => 'link',
      ),
     'required' => TRUE,
     'settings' => array(
       'text_processing' => 0,
      ),
     'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
     );

    foreach ($instances as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'bookplate';
      field_create_instance($instance);

    }

}

/**
 * Implements hook_uninstall() 
 */

 function bookplates_uninstall() {
  // Delete variables
   variable_del('bookplate_library_name');
   variable_del('bookplate_library_catalog_link');
  
  //Inform the user of the removal
  $t = get_t();
  drupal_set_message($t('Bookplates variables removed.'));
  
  // Get all node IDs with bookplate content type.
  $sql_query = 'SELECT nid ';
  $sql_query .= 'FROM {node} ';
  $sql_query .= 'WHERE {node}.type = :type ';
  $result = db_query($sql_query, array(':type' => 'bookplate'));

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all bookplate content
  node_delete_multiple($nids);
  drupal_set_message($t('Bookplates content removed.'));

  // Remove all fields and field instances
  foreach (field_info_instances('node', 'bookplate') as $field_name => $instance) {
    field_delete_instance($instance);
  }

  drupal_set_message($t('Bookplates field and field instances removed.'));

  //Delete the content type.
  node_type_delete('bookplate');
  drupal_set_message($t('Bookplate content type removed.'));

  // Clean up deleted fields.
  field_purge_batch(1000);
 }

 /**
  *  Implements hook_feeds_importer_default()
  

 function bookplates_feeds_importer_default() {
  $export = array ();

  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE;
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'new_to_the_library';
  $feeds_importer->config = array(
    'name' => 'New to the Library',
    'description' => 'Material that has been recently added to the Library',
    'fetcher' => array(
      'plugin_key' => 'FeedsFileFetcher',
      'config' => array(
        'allowed_extensions' => 'txt csv tsv xml opml',
        'direct' => FALSE,
        'directory' => 'public://feeds',
        'allowed_schemes' => array(
          0 => 'public',
        ),
      ),
    ),
    'parser' => array(
      'plugin_key' => 'FeedsCSVParser',
      'config' => array(
        'delimiter' => ',',
        'no_headers' => 0,
      ),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'expire' => '-1',
        'author' => '1',
        'authorize' => 1,
        'mappings' => array(
          0 => array(
            'source' => 'title',
            'target' => 'title',
            'unique' => FALSE,
          ),
          1 => array(
            'source' => 'author',
            'target' => 'title',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'call_number',
            'target' => 'field_feed_item_description',
            'unique' => FALSE,
          ),
        ),
        'update_existing' => '0',
        'input_format' => 'plain_text',
        'skip_hash_check' => 0,
        'bundle' => 'feed_item',
      ),
    ),
    'content_type' => 'feed_item',
    'update' => 0,
    'import_period' => '-1',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 0,
  );


$export['new_to_the_library'] = $feeds_importer;
return $export;

 }
 */
/**
 * Implements hook_ctools_plugin_api().
 */
function bookplates_ctools_plugin_api($module = '', $api = '') {
  if ($module == 'feeds' && $api == 'feeds_importer_default') {
    return array('version' => 1);
  }
}

/**
 * Create Block to Show Newly Added Titles by Bookplate
 */

/**
 * Create View to Browse Bookplates
 */
